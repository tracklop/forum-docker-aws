name: CI/CD Pipeline

on:
    push:
        branches:
            - dev
    pull_request:
        branches:
            - dev

permissions:
    packages: write
    contents: read

jobs:
    changes:
        runs-on: ubuntu-latest
        outputs:
            api: ${{ steps.filter.outputs.api }}
            thread: ${{ steps.filter.outputs.thread }}
            sender: ${{ steps.filter.outputs.sender }}
        steps:
            - uses: actions/checkout@v2
            - id: filter
              uses: dorny/paths-filter@v2
              with:
                  filters: |
                      api:
                        - 'api/**'
                      thread:
                        - 'thread/**'
                      sender:
                        - 'sender/**'

    setup:
        runs-on: ubuntu-latest
        outputs:
            next_version: ${{ steps.calculate_next_version.outputs.next_version }}
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            - name: Calculate next version
              id: calculate_next_version
              run: |
                  git fetch --tags
                  LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0")
                  NEXT_TAG=$((${LAST_TAG//[!0-9]/} + 1))
                  echo "next_version=v$NEXT_TAG" | tee -a $GITHUB_ENV
                  echo "next_version=v$NEXT_TAG" > $GITHUB_OUTPUT
              env:
                  GITHUB_OUTPUT: ${{ github.action_path }}/output

    lint-and-format:
        needs: setup
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service: [api, thread, sender]
        steps:
            - uses: actions/checkout@v2
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '18'
            - name: Install dependencies
              run: cd ${{ matrix.service }}/app && npm install
            - name: Run lint
              run: cd ${{ matrix.service }}/app && npm run lint
            - name: Run format
              run: cd ${{ matrix.service }}/app && npm run format
    run-tests:
        needs: lint-and-format
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service: [api, thread, sender]
        steps:
            - uses: actions/checkout@v2
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '18'
            - name: Install dependencies
              run: cd ${{ matrix.service }}/app && npm install
            - name: Run tests
              run: cd ${{ matrix.service }}/app && npm test
              env:
                  NODE_ENV: test
                  # Ici, ajoutez les variables d'environnement nÃ©cessaires pour vos tests
                  # Exemple : DATABASE_URL: ${{ secrets.DATABASE_URL }}

    # build-and-push:
    #     needs: [setup, run-tests]
    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: actions/checkout@v2
    #         - name: Set up Docker Buildx
    #           uses: docker/setup-buildx-action@v1
    #         - name: Log in to GitHub Container Registry
    #           uses: docker/login-action@v1
    #           with:
    #               registry: ghcr.io
    #               username: ${{ github.actor }}
    #               password: ${{ secrets.GITHUB_TOKEN }}
    #         - name: Build and push Docker images
    #           run: |
    #               SERVICES="api thread sender"
    #               for SERVICE in $SERVICES; do
    #                 # Build the Docker image
    #                 docker build ./$SERVICE -t ghcr.io/${{ github.repository }}/build-$SERVICE:${{ needs.setup.outputs.next_version }} -t ghcr.io/${{ github.repository }}/build-$SERVICE:latest
    #                 # Push both tags: specific version and latest
    #                 docker push ghcr.io/${{ github.repository }}/build-$SERVICE:${{ needs.setup.outputs.next_version }}
    #                 docker push ghcr.io/${{ github.repository }}/build-$SERVICE:latest
    #               done
    #           env:
    #               NEXT_TAG: ${{ needs.setup.outputs.next_version }}

    build-and-push-api:
        needs: [changes, setup, run-tests]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Build and push Docker images
              if: needs.changes.outputs.api == 'true'
              run: |
                  # Build the Docker image
                  docker build ./api -t ghcr.io/${{ github.repository }}/build-api:${{ needs.setup.outputs.next_version }} -t ghcr.io/${{ github.repository }}/build-api:latest
                  # Push both tags: specific version and latest
                  docker push ghcr.io/${{ github.repository }}/build-api:${{ needs.setup.outputs.next_version }}
                  docker push ghcr.io/${{ github.repository }}/build-api:latest
                      done
                  env:
                      NEXT_TAG: ${{ needs.setup.outputs.next_version }}

    build-and-push-thread:
        needs: [changes, setup, run-tests]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Build and push Docker images
              if: needs.changes.outputs.thread == 'true'
              run: |
                  # Build the Docker image
                  docker build ./thread -t ghcr.io/${{ github.repository }}/build-thread:${{ needs.setup.outputs.next_version }} -t ghcr.io/${{ github.repository }}/build-thread:latest
                  # Push both tags: specific version and latest
                  docker push ghcr.io/${{ github.repository }}/build-thread:${{ needs.setup.outputs.next_version }}
                  docker push ghcr.io/${{ github.repository }}/build-thread:latest
                      done
                  env:
                      NEXT_TAG: ${{ needs.setup.outputs.next_version }}

    build-and-push-sender:
        needs: [changes, setup, run-tests]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Build and push Docker images
              if: needs.changes.outputs.sender == 'true'
              run: |
                  # Build the Docker image
                  docker build ./sender -t ghcr.io/${{ github.repository }}/build-sender:${{ needs.setup.outputs.next_version }} -t ghcr.io/${{ github.repository }}/build-sender:latest
                  # Push both tags: specific version and latest
                  docker push ghcr.io/${{ github.repository }}/build-sender:${{ needs.setup.outputs.next_version }}
                  docker push ghcr.io/${{ github.repository }}/build-sender:latest
                      done
                  env:
                      NEXT_TAG: ${{ needs.setup.outputs.next_version }}

    # deploy:
    #     needs: build-and-push
    #     if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    #     runs-on: ubuntu-latest
    #     steps:
    #         - uses: actions/checkout@v2
    #         - name: Setup SSH agent
    #           run: |
    #               mkdir -p ~/.ssh
    #               echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
    #               chmod 600 ~/.ssh/id_rsa
    #               ssh-keyscan ec2-13-39-109-208.eu-west-3.compute.amazonaws.com >> ~/.ssh/known_hosts
    #         - name: Transfer docker-compose.yml to EC2
    #           run: |
    #               scp -i ${{ secrets.SSH_PRIVATE_KEY }} ./docker-compose.yml ec2-user@ec2-13-39-109-208.eu-west-3.compute.amazonaws.com:/home/ec2-user/docker-compose.yml
    #           env:
    #               SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    #         - name: Deploy to Docker Swarm
    #           run: |
    #               ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ec2-user@ec2-13-39-109-208.eu-west-3.compute.amazonaws.com << 'EOF'

    #               # Pour le service API
    #               cat <<EOT > /home/ec2-user/api/app/.env
    #               SECRET=${{ secrets.SESSION_SECRET }}
    #               ENVIRONMENT=${{ secrets.ENVIRONMENT }}
    #               PORT=${{ secrets.API_PORT }}
    #               DATABASE_HOST=${{ secrets.DATABASE_HOST }}
    #               DATABASE_DB=${{ secrets.DATABASE_DB }}
    #               DATABASE_USER=${{ secrets.DATABASE_USER }}
    #               DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
    #               DATABASE_PORT=${{ secrets.DATABASE_PORT }}
    #               DATABASE_SYNCHRONIZE=${{ secrets.DATABASE_SYNCHRONIZE }}
    #               DATABASE_SCHEMA=${{ secrets.DATABASE_SCHEMA }}
    #               DATABASE_DIALECT=${{ secrets.DATABASE_DIALECT }}
    #               EOT

    #               # Pour le service THREAD
    #               cat <<EOT > /home/ec2-user/thread/app/.env
    #               SECRET=${{ secrets.SESSION_SECRET }}
    #               ENVIRONMENT=${{ secrets.ENVIRONMENT }}
    #               PORT=${{ secrets.THREAD_PORT }}
    #               EOT

    #               # Pour le service SENDER
    #               cat <<EOT > /home/ec2-user/sender/app/.env
    #               SECRET=${{ secrets.SESSION_SECRET }}
    #               ENVIRONMENT=${{ secrets.ENVIRONMENT }}
    #               PORT=${{ secrets.SENDER_PORT }}
    #               EOT

    #               # Commande pour dÃ©ployer avec Docker Swarm
    #               docker stack deploy -c /home/ec2-user/docker-compose.yml forum_dev --with-registry-auth

    #               EOF
    #           env:
    #               SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
