name: CI/CD Pipeline

on:
    push:
        branches:
            - dev
    pull_request:
        branches:
            - dev

jobs:
    setup:
        runs-on: ubuntu-latest
        outputs:
            next_version: ${{ steps.versioning.outputs.next_version }}
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            - name: Calculate next version
              id: versioning
              run: |
                  git fetch --tags
                  LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0")
                  NEXT_TAG=$((${LAST_TAG//[!0-9]/} + 1))
                  echo "NEXT_TAG=v$NEXT_TAG" >> $GITHUB_ENV

    lint-and-format:
        needs: setup
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service: [api, thread, sender]
        steps:
            - uses: actions/checkout@v2
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '18'
            - name: Install dependencies
              run: cd ${{ matrix.service }}/app && npm install
            - name: Run lint
              run: cd ${{ matrix.service }}/app && npm run lint
            - name: Run format
              run: cd ${{ matrix.service }}/app && npm run format
    run-tests:
        needs: lint-and-format
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service: [api, thread, sender]
        steps:
            - uses: actions/checkout@v2
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: '18'
            - name: Install dependencies
              run: cd ${{ matrix.service }}/app && npm install
            - name: Run tests
              run: cd ${{ matrix.service }}/app && npm test
              env:
                  NODE_ENV: test
                  # Ici, ajoutez les variables d'environnement nécessaires pour vos tests
                  # Exemple : DATABASE_URL: ${{ secrets.DATABASE_URL }}

    build-and-push:
        needs: run-tests
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_PAT }}
            - name: Build and push Docker images
              run: |
                  SERVICES="api thread sender"
                  for SERVICE in $SERVICES; do
                    docker build ./$SERVICE/app -t ghcr.io/${{ github.repository_owner }}/forum-docker-aws-$SERVICE:${NEXT_TAG}
                    docker push ghcr.io/${{ github.repository_owner }}/forum-docker-aws-$SERVICE:${NEXT_TAG}
                  done
              env:
                  NEXT_TAG: ${{ needs.setup.outputs.NEXT_TAG }}

    deploy:
        needs: build-and-push
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Transfer docker-compose.yml to EC2
              run: |
                  scp -i ${{ secrets.SSH_PRIVATE_KEY }} ./docker-compose.yml ec2-user@ec2-13-39-109-208.eu-west-3.compute.amazonaws.com:/home/ec2-user/docker-compose.yml
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            - name: Deploy to Docker Swarm
              run: |
                  ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ec2-user@ec2-13-39-109-208.eu-west-3.compute.amazonaws.com << 'EOF'

                  # Pour le service API
                  cat <<EOT > /home/ec2-user/api/app/.env
                  SECRET=${{ secrets.SESSION_SECRET }}
                  ENVIRONMENT=${{ secrets.ENVIRONMENT }}
                  PORT=${{ secrets.API_PORT }}
                  DATABASE_HOST=${{ secrets.DATABASE_HOST }}
                  DATABASE_DB=${{ secrets.DATABASE_DB }}
                  DATABASE_USER=${{ secrets.DATABASE_USER }}
                  DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
                  DATABASE_PORT=${{ secrets.DATABASE_PORT }}
                  DATABASE_SYNCHRONIZE=${{ secrets.DATABASE_SYNCHRONIZE }}
                  DATABASE_SCHEMA=${{ secrets.DATABASE_SCHEMA }}
                  DATABASE_DIALECT=${{ secrets.DATABASE_DIALECT }}
                  EOT

                  # Pour le service THREAD
                  cat <<EOT > /home/ec2-user/thread/app/.env
                  SECRET=${{ secrets.SESSION_SECRET }}
                  ENVIRONMENT=${{ secrets.ENVIRONMENT }}
                  PORT=${{ secrets.THREAD_PORT }}
                  EOT

                  # Pour le service SENDER
                  cat <<EOT > /home/ec2-user/sender/app/.env
                  SECRET=${{ secrets.SESSION_SECRET }}
                  ENVIRONMENT=${{ secrets.ENVIRONMENT }}
                  PORT=${{ secrets.SENDER_PORT }}
                  EOT


                  # Commande pour déployer avec Docker Swarm
                  docker stack deploy -c /home/ec2-user/docker-compose.yml forum_dev --with-registry-auth

                  EOF
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
